{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","Response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAiBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,cADQ,CACR,OAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cAGrB,gCACI,mCAAMF,EAAN,OADJ,IAEI,kCAAKC,EAAL,cCYDK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BACMA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACI,cAAC,EAAD,CAEIR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,OAHPS,SCOdC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAWH,OCDZI,EARA,SAACC,GACZ,OACI,sBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,iBACKJ,EAAMK,SADX,WCmBOC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAQnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKX,MAAMK,a,GAjBEQ,aCoEbC,G,wDA7DX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAEjBG,QAAQC,IAAI,oBANH,E,qDASb,WAAoB,IAAD,OACfC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAAEtB,OAAQoC,OAEvCN,QAAQC,IAAI,6B,oBAQpB,WACI,MAA8BV,KAAKJ,MAA5BjB,EAAP,EAAOA,OAAQ2B,EAAf,EAAeA,YACTU,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASd,EAAYa,kBAKzD,OAFAV,QAAQC,IAAI,eAEU,IAAlB/B,EAAO0C,OACA,yCAGH,sBAAK9C,UAAU,KAAf,cACI,oBAAIA,UAAU,KAAd,yBADJ,KAEI,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,eAAC,EAAD,kBACG,eAAC,EAAD,gBACC,cAAC,EAAD,CAAUzB,OAAQqC,IADnB,mB,GAvCLd,cCIHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAQjDX,M","file":"static/js/main.d80d1cf5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => { // receives props as argument and destructuring it into name, email & id\n\n    return (    // the className below is a classe from tachyons package\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \n            <img alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n                {/* the outer {}: indentify that it's a javascript syntax */}\n                {/* the ` ${} `: template strings https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals */}\n            <div>\n                <h2> {name} </h2> {/* {}: remember to add the js destructuring syntax */}\n                <p> {email} </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n     /* {}: JavaScript destructuring syntax that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. */\n    return (\n        <div>\n            { robots.map((user, i) => {\n                return (\n                    <Card \n                        key={i} \n                        id={user.id} \n                        name={user.name} \n                        email={user.email} \n                    />\n                );\n            })\n            }\n        </div>\n        \n    );\n}\n\nexport default CardList;\n\n\n// Map function: https://www.w3schools.com/jsref/jsref_map.asp\n// Map function: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map","import React from 'react';\n\n// onchange event: https://www.w3schools.com/jsref/event_onchange.asp\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange= {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflow: 'scroll', border: '1px solid black', height: '800px'}}>    {/* the outer {} -> jsx expression, the inner {} -> an object https://www.w3schools.com/react/react_css.asp */}\n            {props.children}    {/* Since we wrap it around the CardList in App.js, Scroll component has to receive & render it's children*/}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    // a pre-built function in React to catch errors\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1>Oops. That is not good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react'; // {Componet}: so that we just need to say 'component' instead of 'React.components' when using it\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n// to enable the interactive searchbar, we need to use \"STATE\". To do so, we need to declare the App this way\nclass App extends Component{\n    constructor(){\n        super()     // required syntax to use the \"this\" function below\n        this.state = {\n            robots: [],\n            searchfield: ''     // searchbar input\n        }\n        console.log('1. constructor()');\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')   // go to an external API (jsonplaceholder is a Free fake API for testing and prototyping.)        )\n            .then(Response => Response.json())  // get a response from that API, and process it with .json()\n            .then(users => this.setState({ robots: users}));    // receive users, and update the users with setState\n        \n            console.log('2. componentsDidMount()');\n    }\n\n    // a function that change this.state.searchfield according to input. --> assign this function into <SearchBox/> as a property/input -> assign it again to the ONCHANGE attribute\n    onSearchChange = (event) => {   // this is not a default function of React, so it needs an \"arrow funciton\"\n        this.setState({searchfield: event.target.value})\n    }\n\n    render () {\n        const {robots, searchfield} = this.state;   // so that we don't need to say 'this.state.robots' every time\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())     //\"toLowerCase\": so that we don't need to worry about the capitalizaiton of user inputs\n        })\n     \n        console.log('3. render()');\n\n        if (robots.length === 0) {      // if it takes too long to load, then display \"Loading\"\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className='tc'> {/* 'tc' is a tachyons classname, stands for 'text-center' */}\n                    <h1 className='f1'>RoboFriends</h1>  {/* 'f1': style from tachyons package */}\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>    {/* so that the searchBox keeps on top of the screen -> create a scroll component with another js file */}\n                       <ErrorBoundary>  {/* when something went wrong when loading CardList, then execute the ErrorBoundary component */}\n                        <CardList robots={filteredRobots}/>   {/*CardList is accepting a property \"robots\"*/}\n                       </ErrorBoundary>\n                    </Scroll>\n                 </div>\n            );\n        }\n        \n    }\n}\n\n\n// // Original way of declarinng the App function/class\n// const App = () => {\n//     return (\n//         <div className='tc'> {/* 'tc' is a tachyons classname, stands for 'text-center' */}\n//             <h1>RoboFriends</h1>\n//             <SearchBox />\n//             <CardList robots={robots}/>   // CardList is accepting a property \"robots\"\n//          </div>\n//     );\n// }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// REACT specific: we can import whatever files or packages we want at the top of the js file by \"import\"\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // what screen we're rendering to. ReactDOM is used for the Dom for websites\nimport './index.css';     // refers to the \"index.css\" in the same directory.\n// React allows us to apply different css files to each component, so we've got \"index.css\" for \"index.js\", and \"App.css\" for \"App.js\"\n// import Card from './Card';  // refers to \"App.js\" in the same folder\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// ReactDOM.render(element, b): display \"element\" in b https://reactjs.org/docs/rendering-elements.html\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}